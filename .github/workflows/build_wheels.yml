name: Build and Publish Wheels
on:
  workflow_dispatch:

env:
  USING_PYTHON_VERSION: '3.13.9'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      LATEST_TDLIB_VERSION: ${{ steps.vars.outputs.LATEST_TDLIB_VERSION }}
      LATEST_TDLIB_COMMIT_HASH: ${{ steps.vars.outputs.LATEST_TDLIB_COMMIT_HASH }}
      PYPI_RELEASE_VERSION: ${{ steps.vars.outputs.PYPI_RELEASE_VERSION }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.USING_PYTHON_VERSION }}

      - name: Install dependencies
        run: python -m pip install --upgrade packaging requests

      - name: Fetch TDLib version and commit hash
        id: vars
        run: |
          LATEST_TDLIB_COMMIT_HASH=$(curl -s "https://api.github.com/repos/tdlib/td/commits/master" | grep -oP '"sha": "\K[^"]+' | head -1)
          LATEST_TDLIB_VERSION=$(curl -s "https://raw.githubusercontent.com/tdlib/td/$LATEST_TDLIB_COMMIT_HASH/CMakeLists.txt" | grep -oP 'project\(TDLib VERSION \K[0-9\.]+')
          PYPI_RELEASE_VERSION=$(python next_version.py $LATEST_TDLIB_VERSION)

          echo "LATEST_TDLIB_COMMIT_HASH=$LATEST_TDLIB_COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "LATEST_TDLIB_VERSION=$LATEST_TDLIB_VERSION" >> $GITHUB_OUTPUT
          echo "PYPI_RELEASE_VERSION=$PYPI_RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Update pyproject.toml and README.md
        run: |
          LATEST_TDLIB_VERSION=${{ steps.vars.outputs.LATEST_TDLIB_VERSION }}
          PYPI_RELEASE_VERSION=${{ steps.vars.outputs.PYPI_RELEASE_VERSION }}

          sed -i -r "s/^version = \".*\"/version = \"$PYPI_RELEASE_VERSION\"/" pyproject.toml
          sed -i -r "s/^__version__ = \".*\"/__version__ = \"$PYPI_RELEASE_VERSION\"/" tdjson/__init__.py
          sed -i -r "s|(https://img.shields.io/badge/TDLib-v)[0-9\.]+(-blue)|\\1$LATEST_TDLIB_VERSION\\2|" README.md

      - name: Upload updated files
        uses: actions/upload-artifact@v4
        with:
          name: updated-files
          path: |
            pyproject.toml
            tdjson/__init__.py
            README.md

  linux-build:
    needs: prepare
    strategy:
      matrix:
        runner: [ubuntu-latest, ubuntu-24.04-arm]

    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: Download updated files
        uses: actions/download-artifact@v4
        with:
          name: updated-files
          path: .

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.USING_PYTHON_VERSION }}

      - name: Install dependencies
        run: python -m pip install --upgrade scikit-build-core nanobind build ninja cibuildwheel auditwheel

      - name: Build wheels
        run: |
          mkdir -p ./wheelhouse
          python -m cibuildwheel . --output-dir ./wheelhouse

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.runner }}
          path: ./wheelhouse/*.whl

  publish:
    needs: [prepare, linux-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: ./dist

      - name: Download updated files
        uses: actions/download-artifact@v4
        with:
          name: updated-files
          path: .

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Commit updated files
        uses: EndBug/add-and-commit@v9
        with:
          message: "Update TDLib to ${{ needs.prepare.outputs.LATEST_TDLIB_VERSION }} (tdlib/td@${{ needs.prepare.outputs.LATEST_TDLIB_COMMIT_HASH }})"
          add: '["pyproject.toml", "README.md", "tdjson/__init__.py"]'
          committer_name: GitHub Actions
          committer_email: 41898282+github-actions[bot]@users.noreply.github.com
